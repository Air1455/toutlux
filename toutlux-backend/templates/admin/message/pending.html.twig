{% extends 'base_admin.html.twig' %}

{% block title %}Messages en attente - Admin TOUTLUX{% endblock %}

{% block page_title %}
    <i class="fas fa-clock"></i> Messages en attente de modération
{% endblock %}

{% block breadcrumb %}
    <ol class="breadcrumb float-sm-right">
        <li class="breadcrumb-item"><a href="{{ path('admin_dashboard') }}">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="{{ path('admin_message_index') }}">Messages</a></li>
        <li class="breadcrumb-item active">En attente</li>
    </ol>
{% endblock %}

{% block content %}
    {% if messages|length > 0 %}
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i>
            <strong>{{ messages|length }}</strong> message(s) en attente de modération
        </div>

        <!-- Actions rapides -->
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="btn-group">
                    <button class="btn btn-success" id="approveAll">
                        <i class="fas fa-check-circle"></i> Tout approuver
                    </button>
                    <button class="btn btn-danger" id="rejectAll">
                        <i class="fas fa-times-circle"></i> Tout rejeter
                    </button>
                    <button class="btn btn-info" id="autoModerate">
                        <i class="fas fa-magic"></i> Modération automatique
                    </button>
                </div>

                <div class="float-right">
                    <label class="mr-2">Trier par :</label>
                    <select class="form-control form-control-sm d-inline-block" style="width: auto;" id="sortBy">
                        <option value="date_desc">Plus récents</option>
                        <option value="date_asc">Plus anciens</option>
                        <option value="sender">Expéditeur</option>
                        <option value="property">Propriété</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Messages à modérer -->
        <div class="row" id="pendingMessagesContainer">
            {% for message in messages %}
                <div class="col-md-6 message-card" data-id="{{ message.id }}">
                    <div class="card card-warning card-outline">
                        <div class="card-header">
                            <h5 class="card-title">
                                {% if message.sender.avatarName %}
                                    <img src="{{ asset('uploads/avatars/' ~ message.sender.avatarName) }}"
                                         alt="{{ message.sender.fullName }}"
                                         class="img-circle img-size-32 mr-2">
                                {% elseif message.sender.avatar %}
                                    <img src="{{ message.sender.avatar }}"
                                         alt="{{ message.sender.fullName }}"
                                         class="img-circle img-size-32 mr-2">
                                {% else %}
                                    <img src="{{ asset('dist/img/avatar.png') }}"
                                         alt="{{ message.sender.fullName }}"
                                         class="img-circle img-size-32 mr-2">
                                {% endif %}
                                {{ message.sender.fullName }}
                            </h5>
                            <div class="card-tools">
                                <small class="text-muted">
                                    <i class="far fa-clock"></i> {{ message.createdAt|date('d/m/Y H:i') }}
                                </small>
                            </div>
                        </div>

                        <div class="card-body">
                            <!-- Contexte -->
                            {% if message.property %}
                                <div class="alert alert-info alert-sm">
                                    <i class="fas fa-home"></i> Message concernant :
                                    <a href="{{ path('admin_property_show', {'id': message.property.id}) }}" target="_blank">
                                        {{ message.property.title }}
                                    </a>
                                </div>
                            {% endif %}

                            {% if message.recipient %}
                                <p class="mb-2">
                                    <strong>Destinataire :</strong>
                                    <a href="{{ path('admin_user_show', {'id': message.recipient.id}) }}" target="_blank">
                                        {{ message.recipient.fullName }}
                                    </a>
                                </p>
                            {% endif %}

                            <!-- Sujet du message -->
                            {% if message.subject %}
                                <div class="mb-2">
                                    <strong>Sujet :</strong>
                                    <span class="text-primary">{{ message.subject }}</span>
                                </div>
                            {% endif %}

                            <!-- Contenu du message -->
                            <div class="message-content border rounded p-3 mb-3" style="background-color: #f8f9fa;">
                                <p class="mb-0" style="white-space: pre-wrap;">{{ message.content }}</p>
                            </div>

                            <!-- Analyse du contenu (sera fournie par le contrôleur) -->
                            {% if contentAnalysis[message.id] is defined %}
                                {% set analysis = contentAnalysis[message.id] %}
                                {% if analysis.hasPhone or analysis.hasEmail or analysis.hasUrl %}
                                    <div class="alert alert-warning alert-sm">
                                        <i class="fas fa-exclamation-triangle"></i> Attention :
                                        {% if analysis.hasPhone %}<br>• Numéro de téléphone détecté{% endif %}
                                        {% if analysis.hasEmail %}<br>• Adresse email détectée{% endif %}
                                        {% if analysis.hasUrl %}<br>• URL détectée{% endif %}
                                    </div>
                                {% endif %}
                            {% endif %}

                            <!-- Informations supplémentaires -->
                            <div class="row">
                                <div class="col-6">
                                    <small class="text-muted">
                                        <i class="fas fa-font"></i>
                                        {% if contentAnalysis[message.id] is defined %}
                                            {{ contentAnalysis[message.id].wordCount }} mots
                                        {% else %}
                                            {{ message.content|split(' ')|length }} mots
                                        {% endif %}
                                    </small>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">
                                        <i class="fas fa-text-width"></i>
                                        {% if contentAnalysis[message.id] is defined %}
                                            {{ contentAnalysis[message.id].charCount }} caractères
                                        {% else %}
                                            {{ message.content|length }} caractères
                                        {% endif %}
                                    </small>
                                </div>
                            </div>

                            <!-- Zone d'édition -->
                            <div class="edit-zone mt-3" style="display: none;">
                                <label>Modifier le message avant approbation :</label>
                                <textarea class="form-control mb-2 edited-content" rows="4">{{ message.content }}</textarea>
                                <small class="text-muted">
                                    <i class="fas fa-info-circle"></i> Le message original sera conservé
                                </small>
                            </div>
                        </div>

                        <div class="card-footer">
                            <div class="btn-group btn-block">
                                <button class="btn btn-success approve-message" data-id="{{ message.id }}">
                                    <i class="fas fa-check"></i> Approuver
                                </button>
                                <button class="btn btn-warning edit-message" data-id="{{ message.id }}">
                                    <i class="fas fa-edit"></i> Modifier
                                </button>
                                <button class="btn btn-danger reject-message" data-id="{{ message.id }}">
                                    <i class="fas fa-times"></i> Rejeter
                                </button>
                            </div>

                            <div class="rejection-reason mt-2" style="display: none;">
                                <input type="text" class="form-control form-control-sm"
                                       placeholder="Raison du rejet (optionnel)">
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="alert alert-success">
            <i class="fas fa-check-circle"></i>
            Aucun message en attente de modération !
        </div>

        <div class="text-center mt-4">
            <a href="{{ path('admin_message_index') }}" class="btn btn-primary">
                <i class="fas fa-arrow-left"></i> Retour à la liste des messages
            </a>
        </div>
    {% endif %}

    <!-- Modal de confirmation -->
    <div class="modal fade" id="confirmModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Confirmation</h4>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p id="confirmMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-primary" id="confirmAction">Confirmer</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block extra_javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Fonction pour afficher les notifications
            function showNotification(type, message) {
                const alertClass = type === 'success' ? 'alert-success' :
                    type === 'danger' ? 'alert-danger' : 'alert-info';

                const notification = document.createElement('div');
                notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
                notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';
                notification.innerHTML = `
            <button type="button" class="close" data-dismiss="alert">
                <span>&times;</span>
            </button>
            ${message}
        `;

                document.body.appendChild(notification);

                setTimeout(function() {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 3000);
            }

            // Fonction de modération
            function moderateMessage(messageId, action, modifiedContent = null, reason = null) {
                let url = '';
                let data = {};

                if (action === 'approve') {
                    url = '{{ path('admin_message_approve', {id: 'ID_PLACEHOLDER'}) }}'.replace('ID_PLACEHOLDER', messageId);
                    data = {
                        content: modifiedContent,
                        _token: '{{ csrf_token('approve_message') }}'
                    };
                } else if (action === 'reject') {
                    url = '{{ path('admin_message_reject', {id: 'ID_PLACEHOLDER'}) }}'.replace('ID_PLACEHOLDER', messageId);
                    data = {
                        reason: reason,
                        _token: '{{ csrf_token('reject_message') }}'
                    };
                }

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            // Animation de disparition
                            const card = document.querySelector(`.message-card[data-id="${messageId}"]`);
                            card.style.opacity = '0';
                            card.style.transition = 'opacity 0.3s';

                            setTimeout(() => {
                                card.remove();

                                // Vérifier s'il reste des messages
                                if (document.querySelectorAll('.message-card').length === 0) {
                                    location.reload();
                                }
                            }, 300);

                            // Notification
                            showNotification(
                                action === 'approve' ? 'success' : 'danger',
                                action === 'approve' ? 'Message approuvé' : 'Message rejeté'
                            );
                        } else {
                            showNotification('danger', result.error || 'Une erreur est survenue');
                        }
                    })
                    .catch(error => {
                        showNotification('danger', 'Une erreur est survenue');
                    });
            }

            // Boutons d'approbation
            document.querySelectorAll('.approve-message').forEach(button => {
                button.addEventListener('click', function() {
                    const messageId = this.dataset.id;
                    const card = document.querySelector(`.message-card[data-id="${messageId}"]`);
                    const editedContent = card.querySelector('.edited-content').value;
                    const originalContent = '{{ message.content|default('')|e('js') }}';

                    moderateMessage(messageId, 'approve', editedContent !== originalContent ? editedContent : null);
                });
            });

            // Boutons de modification
            document.querySelectorAll('.edit-message').forEach(button => {
                button.addEventListener('click', function() {
                    const messageId = this.dataset.id;
                    const card = document.querySelector(`.message-card[data-id="${messageId}"]`);
                    const editZone = card.querySelector('.edit-zone');

                    if (editZone.style.display === 'none') {
                        editZone.style.display = 'block';
                        this.classList.add('active', 'btn-primary');
                        this.classList.remove('btn-warning');
                        this.innerHTML = '<i class="fas fa-save"></i> Enregistrer';
                    } else {
                        editZone.style.display = 'none';
                        this.classList.remove('active', 'btn-primary');
                        this.classList.add('btn-warning');
                        this.innerHTML = '<i class="fas fa-edit"></i> Modifier';
                    }
                });
            });

            // Boutons de rejet
            document.querySelectorAll('.reject-message').forEach(button => {
                button.addEventListener('click', function() {
                    const messageId = this.dataset.id;
                    const card = document.querySelector(`.message-card[data-id="${messageId}"]`);
                    const reasonDiv = card.querySelector('.rejection-reason');

                    if (reasonDiv.style.display === 'none') {
                        reasonDiv.style.display = 'block';
                        this.textContent = 'Confirmer le rejet';
                        this.classList.add('btn-block');

                        // Remplacer l'événement
                        const newButton = this.cloneNode(true);
                        this.parentNode.replaceChild(newButton, this);

                        newButton.addEventListener('click', function() {
                            const reason = card.querySelector('.rejection-reason input').value;
                            moderateMessage(messageId, 'reject', null, reason);
                        });
                    }
                });
            });

            // Tout approuver
            document.getElementById('approveAll').addEventListener('click', function() {
                const confirmMessage = document.getElementById('confirmMessage');
                const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));

                confirmMessage.textContent = 'Approuver tous les messages en attente ?';
                confirmModal.show();

                document.getElementById('confirmAction').onclick = function() {
                    const messageIds = Array.from(document.querySelectorAll('.message-card')).map(card => card.dataset.id);

                    messageIds.forEach(id => {
                        moderateMessage(id, 'approve');
                    });

                    confirmModal.hide();
                };
            });

            // Tout rejeter
            document.getElementById('rejectAll').addEventListener('click', function() {
                const confirmMessage = document.getElementById('confirmMessage');
                const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));

                confirmMessage.textContent = 'Rejeter tous les messages en attente ?';
                confirmModal.show();

                document.getElementById('confirmAction').onclick = function() {
                    const messageIds = Array.from(document.querySelectorAll('.message-card')).map(card => card.dataset.id);

                    messageIds.forEach(id => {
                        moderateMessage(id, 'reject', null, 'Rejet en masse');
                    });

                    confirmModal.hide();
                };
            });

            // Tri des messages
            document.getElementById('sortBy').addEventListener('change', function() {
                const sortBy = this.value;
                const container = document.getElementById('pendingMessagesContainer');
                const cards = Array.from(container.querySelectorAll('.message-card'));

                cards.sort((a, b) => {
                    switch(sortBy) {
                        case 'date_asc':
                            return a.querySelector('.fa-clock').parentNode.textContent.localeCompare(
                                b.querySelector('.fa-clock').parentNode.textContent
                            );
                        case 'date_desc':
                            return b.querySelector('.fa-clock').parentNode.textContent.localeCompare(
                                a.querySelector('.fa-clock').parentNode.textContent
                            );
                        case 'sender':
                            return a.querySelector('.card-title').textContent.localeCompare(
                                b.querySelector('.card-title').textContent
                            );
                        case 'property':
                            const aProperty = a.querySelector('.alert-info a');
                            const bProperty = b.querySelector('.alert-info a');
                            return (aProperty?.textContent || '').localeCompare(bProperty?.textContent || '');
                    }
                });

                // Réorganiser les cartes
                cards.forEach(card => container.appendChild(card));
            });

            // Raccourcis clavier
            document.addEventListener('keydown', function(e) {
                const hoveredCard = document.querySelector('.message-card:hover');
                if (hoveredCard) {
                    const messageId = hoveredCard.dataset.id;

                    switch(e.key) {
                        case 'a': // Approuver
                            hoveredCard.querySelector('.approve-message').click();
                            break;
                        case 'r': // Rejeter
                            hoveredCard.querySelector('.reject-message').click();
                            break;
                        case 'e': // Éditer
                            hoveredCard.querySelector('.edit-message').click();
                            break;
                    }
                }
            });
        });
    </script>
{% endblock %}
