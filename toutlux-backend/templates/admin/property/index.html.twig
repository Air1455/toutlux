{% extends 'base_admin.html.twig' %}

{% block title %}Propriétés - Admin TOUTLUX{% endblock %}
{% block page_title %}Gestion des Propriétés{% endblock %}

{% block breadcrumb %}
    <li class="breadcrumb-item active">Propriétés</li>
{% endblock %}

{% block content %}
    <!-- Stats Row -->
    <div class="row mb-3">
        <div class="col-lg-3 col-6">
            <div class="small-box bg-info">
                <div class="inner">
                    <h3>{{ stats.total }}</h3>
                    <p>Total Propriétés</p>
                </div>
                <div class="icon"><i class="fas fa-home"></i></div>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-success">
                <div class="inner">
                    <h3>{{ stats.available }}</h3>
                    <p>Disponibles</p>
                </div>
                <div class="icon"><i class="fas fa-check-circle"></i></div>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-warning">
                <div class="inner">
                    <h3>{{ stats.featured }}</h3>
                    <p>En Vedette</p>
                </div>
                <div class="icon"><i class="fas fa-star"></i></div>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <div class="small-box bg-primary">
                <div class="inner">
                    <h3>{{ stats.totalViews }}</h3>
                    <p>Vues Totales</p>
                </div>
                <div class="icon"><i class="fas fa-eye"></i></div>
            </div>
        </div>
    </div>

    <!-- Filters and Actions Card -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">
                <i class="fas fa-filter mr-2"></i>Filtres et Actions
            </h3>
            <div class="card-tools">
                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                    <i class="fas fa-minus"></i>
                </button>
            </div>
        </div>

        <div class="card-body">
            <!-- Form de filtres -->
            <form id="property-filters" method="GET" class="mb-3">
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label for="search">Recherche</label>
                            <input type="text"
                                   class="form-control"
                                   id="search"
                                   name="search"
                                   value="{{ filters.search }}"
                                   placeholder="Titre, description...">
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="type">Type</label>
                            <select class="form-control" id="type" name="type">
                                <option value="">Tous</option>
                                <option value="sale" {{ filters.type == 'sale' ? 'selected' : '' }}>Vente</option>
                                <option value="rent" {{ filters.type == 'rent' ? 'selected' : '' }}>Location</option>
                            </select>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="city">Ville</label>
                            <select class="form-control" id="city" name="city">
                                <option value="">Toutes</option>
                                {% for city in cities %}
                                    <option value="{{ city }}" {{ filters.city == city ? 'selected' : '' }}>
                                        {{ city }}
                                    </option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="available">Statut</label>
                            <select class="form-control" id="available" name="available">
                                <option value="">Tous</option>
                                <option value="1" {{ filters.available == '1' ? 'selected' : '' }}>Disponible</option>
                                <option value="0" {{ filters.available == '0' ? 'selected' : '' }}>Indisponible</option>
                            </select>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <label>&nbsp;</label>
                            <div class="d-flex">
                                <button type="submit" class="btn btn-primary mr-2" id="filter-btn">
                                    <i class="fas fa-search"></i> Filtrer
                                </button>
                                <a href="{{ path('admin_property_index') }}" class="btn btn-secondary">
                                    <i class="fas fa-times"></i> Reset
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Filtres avancés (collapsible) -->
                <div class="collapse" id="advanced-filters">
                    <hr>
                    <div class="row">
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="price_min">Prix min</label>
                                <input type="number" class="form-control" id="price_min" name="price_min"
                                       value="{{ filters.price_min }}" placeholder="0">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="price_max">Prix max</label>
                                <input type="number" class="form-control" id="price_max" name="price_max"
                                       value="{{ filters.price_max }}" placeholder="1000000">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="surface_min">Surface min</label>
                                <input type="number" class="form-control" id="surface_min" name="surface_min"
                                       value="{{ filters.surface_min }}" placeholder="0">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="surface_max">Surface max</label>
                                <input type="number" class="form-control" id="surface_max" name="surface_max"
                                       value="{{ filters.surface_max }}" placeholder="500">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="rooms_min">Pièces min</label>
                                <input type="number" class="form-control" id="rooms_min" name="rooms_min"
                                       value="{{ filters.rooms_min }}" placeholder="1">
                            </div>
                        </div>
                    </div>
                </div>

                <button type="button" class="btn btn-link p-0" data-toggle="collapse" data-target="#advanced-filters">
                    <i class="fas fa-cogs"></i> Filtres avancés
                </button>
            </form>

            <!-- Actions Toolbar -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="btn-group">
                    <button type="button" class="btn btn-success btn-sm" id="export-all-btn">
                        <i class="fas fa-download"></i> Exporter tout
                    </button>
                    <button type="button" class="btn btn-success btn-sm" id="export-selection-btn" disabled>
                        <i class="fas fa-download"></i> Exporter sélection
                    </button>
                </div>

                <div class="btn-group">
                    <a href="{{ path('admin_property_new') }}" class="btn btn-primary btn-sm">
                        <i class="fas fa-plus"></i> Nouvelle Propriété
                    </a>
                    <a href="{{ path('admin_property_stats') }}" class="btn btn-info btn-sm">
                        <i class="fas fa-chart-bar"></i> Statistiques
                    </a>
                </div>
            </div>

            <!-- Bulk Actions -->
            <div id="bulk-actions" class="alert alert-info" style="display: none;">
                <div class="d-flex justify-content-between align-items-center">
                    <span><strong id="selected-count">0</strong> propriété(s) sélectionnée(s)</span>
                    <div class="btn-group btn-group-sm">
                        <button type="button" class="btn btn-warning" id="bulk-verify-btn">
                            <i class="fas fa-check"></i> Vérifier
                        </button>
                        <button type="button" class="btn btn-info" id="bulk-feature-btn">
                            <i class="fas fa-star"></i> Mettre en vedette
                        </button>
                        <button type="button" class="btn btn-danger" id="bulk-delete-btn">
                            <i class="fas fa-trash"></i> Supprimer
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Properties Table -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">
                <i class="fas fa-list mr-2"></i>Liste des Propriétés
                <span class="badge badge-primary ml-2">{{ totalProperties }}</span>
            </h3>
        </div>

        <div class="card-body p-0">
            <div class="table-responsive" id="properties-table-container">
                <table class="table table-striped table-hover">
                    <thead>
                    <tr>
                        <th width="30">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="select-all">
                                <label class="custom-control-label" for="select-all"></label>
                            </div>
                        </th>
                        <th>Image</th>
                        <th>Titre</th>
                        <th>Type</th>
                        <th>Prix</th>
                        <th>Ville</th>
                        <th>Propriétaire</th>
                        <th>Statut</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for property in properties %}
                        <tr>
                            <td>
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox"
                                           class="custom-control-input property-checkbox"
                                           id="property-{{ property.id }}"
                                           value="{{ property.id }}">
                                    <label class="custom-control-label" for="property-{{ property.id }}"></label>
                                </div>
                            </td>
                            <td>
                                {% if property.images|length > 0 %}
                                    <img src="{{ property.images.first.url }}"
                                         alt="{{ property.title }}"
                                         class="img-thumbnail"
                                         style="width: 50px; height: 50px; object-fit: cover;">
                                {% else %}
                                    <div class="bg-light d-flex align-items-center justify-content-center"
                                         style="width: 50px; height: 50px;">
                                        <i class="fas fa-image text-muted"></i>
                                    </div>
                                {% endif %}
                            </td>
                            <td>
                                <strong>{{ property.title|length > 40 ? property.title|slice(0, 40) ~ '...' : property.title }}</strong>
                                <br>
                                <small class="text-muted">{{ property.surface }} m² • {{ property.rooms }} pièces</small>
                            </td>
                            <td>
                                {% if property.type == 'sale' %}
                                    <span class="badge badge-success">Vente</span>
                                {% else %}
                                    <span class="badge badge-info">Location</span>
                                {% endif %}
                            </td>
                            <td>
                                <strong>{{ property.formattedPrice }}</strong>
                            </td>
                            <td>{{ property.city }}</td>
                            <td>
                                <a href="{{ path('admin_user_show', {id: property.owner.id}) }}">
                                    {{ property.owner.fullName }}
                                </a>
                            </td>
                            <td>
                                <div class="d-flex flex-column">
                                    {% if property.available %}
                                        <span class="badge badge-success mb-1">Disponible</span>
                                    {% else %}
                                        <span class="badge badge-secondary mb-1">Indisponible</span>
                                    {% endif %}

                                    {% if property.verified %}
                                        <span class="badge badge-primary mb-1">Vérifié</span>
                                    {% endif %}

                                    {% if property.featured %}
                                        <span class="badge badge-warning">Vedette</span>
                                    {% endif %}
                                </div>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="{{ path('admin_property_show', {id: property.id}) }}"
                                       class="btn btn-sm btn-info"
                                       title="Voir">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="{{ path('admin_property_edit', {id: property.id}) }}"
                                       class="btn btn-sm btn-warning"
                                       title="Éditer">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button"
                                            class="btn btn-sm btn-{{ property.verified ? 'secondary' : 'primary' }} toggle-verified-btn"
                                            data-id="{{ property.id }}"
                                            title="{{ property.verified ? 'Démarquer comme vérifié' : 'Marquer comme vérifié' }}">
                                        <i class="fas fa-{{ property.verified ? 'times' : 'check' }}"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="9" class="text-center py-4">
                                <i class="fas fa-home fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Aucune propriété trouvée</p>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination -->
        {% if totalPages > 1 %}
            <div class="card-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        Affichage de {{ ((page - 1) * 20) + 1 }} à {{ (page * 20) > totalProperties ? totalProperties : (page * 20) }}
                        sur {{ totalProperties }} propriétés
                    </div>

                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            {% if page > 1 %}
                                <li class="page-item">
                                    <a class="page-link" href="{{ path('admin_property_index', filters|merge({page: page - 1})) }}">
                                        Précédent
                                    </a>
                                </li>
                            {% endif %}

                            {% for p in 1..totalPages %}
                                {% if p == page %}
                                    <li class="page-item active">
                                        <span class="page-link">{{ p }}</span>
                                    </li>
                                {% elseif p == 1 or p == totalPages or (p >= page - 2 and p <= page + 2) %}
                                    <li class="page-item">
                                        <a class="page-link" href="{{ path('admin_property_index', filters|merge({page: p})) }}">
                                            {{ p }}
                                        </a>
                                    </li>
                                {% elseif p == page - 3 or p == page + 3 %}
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                {% endif %}
                            {% endfor %}

                            {% if page < totalPages %}
                                <li class="page-item">
                                    <a class="page-link" href="{{ path('admin_property_index', filters|merge({page: page + 1})) }}">
                                        Suivant
                                    </a>
                                </li>
                            {% endif %}
                        </ul>
                    </nav>
                </div>
            </div>
        {% endif %}
    </div>
{% endblock %}

{% block extra_javascripts %}
    <script>
        $(document).ready(function() {
            // Configuration du loader
            const propertyManager = {
                selectedProperties: new Set(),

                init() {
                    this.setupEventListeners();
                    this.setupFormSubmission();
                    this.setupBulkActions();
                    this.setupExportActions();
                },

                setupEventListeners() {
                    // Checkbox "Sélectionner tout"
                    $('#select-all').on('change', (e) => {
                        const isChecked = e.target.checked;
                        $('.property-checkbox').prop('checked', isChecked);
                        this.updateSelectedProperties();
                    });

                    // Checkboxes individuelles
                    $('.property-checkbox').on('change', () => {
                        this.updateSelectedProperties();
                    });

                    // Toggle actions
                    $('.toggle-verified-btn').on('click', (e) => {
                        this.togglePropertyStatus(e.target, 'verified');
                    });
                },

                setupFormSubmission() {
                    // Filtres avec loader
                    $('#property-filters').on('submit', (e) => {
                        // Afficher le loader pour les filtres
                        LoaderManager.showFilter('Application des filtres...');

                        // Petite simulation du délai (en réalité, la page se rechargera)
                        setTimeout(() => {
                            // Le loader sera automatiquement masqué au rechargement de la page
                        }, 500);
                    });

                    // Auto-submit sur changement des selects
                    $('#type, #city, #available').on('change', () => {
                        LoaderManager.showFilter('Mise à jour des résultats...');
                        $('#property-filters').submit();
                    });
                },

                setupBulkActions() {
                    // Actions groupées
                    $('#bulk-verify-btn').on('click', () => {
                        this.executeBulkAction('verify', 'Vérification des propriétés...');
                    });

                    $('#bulk-feature-btn').on('click', () => {
                        this.executeBulkAction('feature', 'Mise en vedette...');
                    });

                    $('#bulk-delete-btn').on('click', () => {
                        if (confirm('Êtes-vous sûr de vouloir supprimer ces propriétés ?')) {
                            this.executeBulkAction('delete', 'Suppression en cours...');
                        }
                    });
                },

                setupExportActions() {
                    // Export complet
                    $('#export-all-btn').on('click', () => {
                        this.exportProperties('all');
                    });

                    // Export sélection
                    $('#export-selection-btn').on('click', () => {
                        this.exportProperties('selection');
                    });
                },

                updateSelectedProperties() {
                    this.selectedProperties.clear();
                    $('.property-checkbox:checked').each((i, checkbox) => {
                        this.selectedProperties.add(checkbox.value);
                    });

                    const count = this.selectedProperties.size;
                    $('#selected-count').text(count);
                    $('#bulk-actions').toggle(count > 0);
                    $('#export-selection-btn').prop('disabled', count === 0);

                    // Mettre à jour le checkbox "tout sélectionner"
                    const totalCheckboxes = $('.property-checkbox').length;
                    $('#select-all').prop('indeterminate', count > 0 && count < totalCheckboxes);
                    $('#select-all').prop('checked', count === totalCheckboxes && count > 0);
                },

                async togglePropertyStatus(button, action) {
                    const $btn = $(button);
                    const propertyId = $btn.data('id');

                    // Loader sur le bouton
                    $btn.showLoader();

                    try {
                        const response = await fetch(`{{ path('admin_property_index') }}/${propertyId}/toggle-${action}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Mettre à jour l'apparence du bouton
                            if (action === 'verified') {
                                const isVerified = result.verified;
                                $btn.removeClass('btn-primary btn-secondary')
                                    .addClass(isVerified ? 'btn-secondary' : 'btn-primary');
                                $btn.find('i').removeClass('fa-check fa-times')
                                    .addClass(isVerified ? 'fa-times' : 'fa-check');
                                $btn.attr('title', isVerified ? 'Démarquer comme vérifié' : 'Marquer comme vérifié');
                            }

                            // Notification de succès
                            this.showNotification('success', 'Statut mis à jour avec succès');
                        } else {
                            this.showNotification('error', 'Erreur lors de la mise à jour');
                        }
                    } catch (error) {
                        this.showNotification('error', 'Erreur de connexion');
                    } finally {
                        $btn.hideLoader();
                    }
                },

                async executeBulkAction(action, message) {
                    if (this.selectedProperties.size === 0) return;

                    // Afficher le loader global
                    const loaderId = LoaderManager.show({
                        message: message,
                        subtitle: `${this.selectedProperties.size} propriété(s) sélectionnée(s)`,
                        spinnerColor: action === 'delete' ? 'danger' : 'primary'
                    });

                    try {
                        const response = await fetch('{{ path("admin_property_bulk_action") }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({
                                action: action,
                                ids: Array.from(this.selectedProperties)
                            })
                        });

                        const result = await response.json();

                        if (result.success) {
                            this.showNotification('success', 'Action exécutée avec succès');
                            // Recharger la page après un court délai
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            this.showNotification('error', result.error || 'Erreur lors de l\'exécution');
                            LoaderManager.hide(loaderId);
                        }
                    } catch (error) {
                        this.showNotification('error', 'Erreur de connexion');
                        LoaderManager.hide(loaderId);
                    }
                },

                exportProperties(type) {
                    let url = '{{ path("admin_property_export") }}';
                    let message = 'Génération de l\'export...';

                    if (type === 'selection' && this.selectedProperties.size > 0) {
                        url += '?ids=' + Array.from(this.selectedProperties).join(',');
                        message += ` (${this.selectedProperties.size} propriétés)`;
                    } else if (type === 'all') {
                        // Ajouter les filtres actuels à l'URL d'export
                        const formData = new FormData($('#property-filters')[0]);
                        const params = new URLSearchParams();
                        for (let [key, value] of formData.entries()) {
                            if (value) params.append(key, value);
                        }
                        if (params.toString()) {
                            url += '?' + params.toString();
                        }
                    }

                    // Afficher le loader d'export
                    const loaderId = LoaderManager.showExport(message);

                    // Créer un lien temporaire pour télécharger
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = '';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    // Masquer le loader après un délai
                    setTimeout(() => {
                        LoaderManager.hide(loaderId);
                        this.showNotification('success', 'Export téléchargé avec succès');
                    }, 2000);
                },

                showNotification(type, message) {
                    // Utiliser les notifications Toastr ou les flash messages de Symfony
                    const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                    const icon = type === 'success' ? 'fa-check' : 'fa-exclamation-triangle';

                    const notification = $(`
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    <i class="fas ${icon} mr-2"></i>${message}
                    <button type="button" class="close" data-dismiss="alert">
                        <span>&times;</span>
                    </button>
                </div>
            `);

                    // Ajouter en haut du contenu
                    $('.content .container-fluid').prepend(notification);

                    // Auto-remove après 5 secondes
                    setTimeout(() => {
                        notification.fadeOut(() => notification.remove());
                    }, 5000);
                }
            };

            // Initialiser le gestionnaire
            propertyManager.init();

            // Loader au chargement initial de la page
            if (document.readyState === 'loading') {
                LoaderManager.show({
                    message: 'Chargement des propriétés...',
                    subtitle: 'Récupération des données'
                });

                $(window).on('load', () => {
                    LoaderManager.hide();
                });
            }
        });
    </script>
{% endblock %}
