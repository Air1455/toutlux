parameters:
    app.name: '%env(APP_NAME)%'
    app.url: '%env(APP_URL)%'
    app.mobile_url: '%env(MOBILE_APP_URL)%'

    # Upload parameters
    app.upload_max_size: '%env(int:UPLOAD_MAX_SIZE)%'
    app.allowed_image_types: '%env(ALLOWED_IMAGE_TYPES)%'
    app.allowed_document_types: '%env(ALLOWED_DOCUMENT_TYPES)%'

    # Email parameters
    app.email_from_address: '%env(EMAIL_FROM_ADDRESS)%'
    app.email_from_name: '%env(EMAIL_FROM_NAME)%'
    app.admin_notification_email: '%env(ADMIN_NOTIFICATION_EMAIL)%'

    # Trust score parameters
    app.trust_score.email_verified: '%env(float:TRUST_SCORE_EMAIL_VERIFIED)%'
    app.trust_score.profile_completed: '%env(float:TRUST_SCORE_PROFILE_COMPLETED)%'
    app.trust_score.identity_verified: '%env(float:TRUST_SCORE_IDENTITY_VERIFIED)%'
    app.trust_score.financial_verified: '%env(float:TRUST_SCORE_FINANCIAL_VERIFIED)%'

    # Pagination
    app.default_page_size: '%env(int:DEFAULT_PAGE_SIZE)%'
    app.max_page_size: '%env(int:MAX_PAGE_SIZE)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
#            $projectDir: '%kernel.project_dir%'
#            $uploadMaxSize: '%app.upload_max_size%'
#            $allowedImageTypes: '%app.allowed_image_types%'
#            $allowedDocumentTypes: '%app.allowed_document_types%'
#            $emailFromAddress: '%app.email_from_address%'
#            $emailFromName: '%app.email_from_name%'
#            $adminNotificationEmail: '%app.admin_notification_email%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # Service aliases
#    App\Service\Auth\JWTService:
#        arguments:
#            $tokenTTL: '%env(int:JWT_TTL)%'

#    App\Service\Document\TrustScoreCalculator:
#        arguments:
#            $scoreConfig:
#                email_verified: '%app.trust_score.email_verified%'
#                profile_completed: '%app.trust_score.profile_completed%'
#                identity_verified: '%app.trust_score.identity_verified%'
#                financial_verified: '%app.trust_score.financial_verified%'

    # Event listeners
#    App\EventListener\JWTCreatedListener:
#        tags:
#            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
#
#    App\EventListener\JWTDecodedListener:
#        tags:
#            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }
#
#    App\EventListener\AuthenticationSuccessListener:
#        tags:
#            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccess }

    # Commands
#    App\Command\CreateAdminCommand:
#        arguments:
#            $defaultEmail: '%env(ADMIN_EMAIL)%'
#            $defaultPassword: '%env(ADMIN_PASSWORD)%'

    # Voters
#    App\Security\Voter\PropertyVoter:
#        tags:
#            - { name: security.voter }
#
#    App\Security\Voter\MessageVoter:
#        tags:
#            - { name: security.voter }
#
#    App\Security\Voter\DocumentVoter:
#        tags:
#            - { name: security.voter }
#
#    App\Security\Voter\UserVoter:
#        tags:
#            - { name: security.voter }
